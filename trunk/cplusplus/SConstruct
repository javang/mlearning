import os
import os.path
import glob
from colorizer import colorizer


def get_files(directory, ext, recursive=True, level=0):
    """
        Get all the files with an given extension from a directory 
        @param directory
        @param ext extension of the files
        @param recursive If true, the search is recursive
        @paran level Maximum level of recursion (TODO)   
    """
    cwd = os.getcwd()
    contents = os.listdir(directory)

    os.chdir( directory )
    files = []
    for c in contents:
        if os.path.isdir(c) and recursive:
            files.extend(get_files(c,ext))
        elif os.path.isfile(c):
            files.append(c) 
    os.chdir( cwd )
    files = [os.path.join(directory,f) for f in files]
    return files


def check_headers(conf, files):
    for d in files:
        if not conf.CheckCXXHeader(d):
            print "Could not find the required header",d

#################################
# Options file
#################################

variables = Variables('scons_config.py')
variables.Add("build_dir", "directory to build the library", default="build")
variables.Add(PathVariable("eigen_dir", "directory containing the files of the Eigen library",""))
variables.Add(PathVariable("google_test_dir", "directory containg the google_test " \
                        "include and lib directories",""))


#################################
#
#################################
home=os.environ["HOME"]
path=os.environ["PATH"]
term = os.environ["TERM"]

env = Environment(variables=variables)
env['ENV'] = {'PATH' : path, 'TERM' : term, 'HOME' : home}
env['CPPPATH'] = ["include",
                  "/usr/include",
                  "$eigen_dir",
                  ] # search for includes
env['CXXFLAGS'] = ["-std=c++0x"] 

# for nice compiling colors
col = colorizer()
col.colorize(env)


# preparation of repositories
env.Repository('')
env.Repository('tests')

# configure
conf = Configure(env)
eigen_dir = env['eigen_dir']
required_headers = ["boost/shared_ptr.hpp", eigen_dir+"/Eigen/Dense", ]
check_headers(conf, required_headers)


# Build dynamic library
cwd = os.getcwd()
src = os.path.join(cwd,"src")
sources = get_files(src, "*.cpp")
libmlearning = env.SharedLibrary('mlearning', sources)

# Install lib
env.Install('$build_dir/lib', libmlearning)

# install includes


# build the tests 
google_test_dir = env['google_test_dir']
env['CPPPATH'].append([google_test_dir + "/include"])
env['LIBPATH'] = [google_test_dir + "/lib",'.']
print env["LIBPATH"]
src = os.path.join(cwd,"tests")
test_sources = get_files(src, "*.cpp")
test_program = env.Program('test', test_sources, LIBS=['mlearning', "gtest"])
env.Install('$build_dir/tests', test_program)



