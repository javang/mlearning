import os
import os.path
import glob
from colorizer import colorizer


def check_headers(conf, files):
    for d in files:
        if not conf.CheckCXXHeader(d):
            print "Could not find the required header",d
            quit()


#################################
# Options file
#################################

# directories in the project
dirs = ["utility", "algorithms", "trees"]


#################################
# Config
#################################
home=os.environ["HOME"]
path=os.environ["PATH"]
term = os.environ["TERM"]

variables = Variables('scons_config.py')
variables.Add("build_dir", "directory to build the library", default="build")
variables.Add("install_dir", "directory to install the library", default="lib")
variables.Add(PathVariable("eigen_dir", "directory containing the files of the Eigen library",""))
variables.Add(PathVariable("google_test_dir", "directory containg the google_test " \
                        "include and lib directories",""))
variables.Add("compiler", "The compiler to use", default="g++")

env = Environment(variables=variables)
env['ENV'] = {'PATH' : path, 'TERM' : term, 'HOME' : home}
env['CPPPATH'] = ["#include", "/usr/include"] # the symbol "#" means the directory where SConstruct is
eigen_dir = env['google_test_dir']
env['CPPPATH'].append(eigen_dir)
env['CXXFLAGS'] = ["-std=c++0x", "-fPIC"] 
env["CXX"] = env["compiler"] 
eigen_dir = env['eigen_dir']
required_headers = [eigen_dir+"/Eigen/Dense" ]
conf = Configure(env)
# check_headers(conf, required_headers)
# for nice compiling colors
col = colorizer()
col.colorize(env)

build_dir = env['build_dir']
install_dir = env['install_dir']


# Build and install dynamic library 
VariantDir(build_dir, "src", duplicate=0)
mlearning = SConscript("%s/SConscript" % build_dir, exports=['env','dirs'])
VariantDir(install_dir, ".", duplicate=0)
Install(install_dir, mlearning)

# Same for program of tests
google_test_dir = env['google_test_dir']
env['CPPPATH'].append([google_test_dir + "/include"])
build_path = os.path.abspath(build_dir)
env['LIBPATH'] = [google_test_dir + "/lib", build_path]

build_dir = env['build_dir'] + "/tests"
VariantDir(build_dir, "tests", duplicate=False)
tests_exec = SConscript("%s/SConscript" % build_dir, exports=['env','dirs'])
VariantDir(install_dir, ".", duplicate=0)
Install(install_dir, tests_exec)

#env.Alias('install', install_dir)

